apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-invocation-logs
  labels:
    io.kompose.service: api-invocation-logs
  {{- include "capif.labels" . | nindent 4 }}
  annotations:
    kompose.cmd: kompose -f ../services/docker-compose.yml convert
    kompose.version: 1.28.0 (c4137012e)
spec:
  replicas: {{ .Values.apiInvocationLogs.replicas }}
  selector:
    matchLabels:
      io.kompose.service: api-invocation-logs
    {{- include "capif.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        io.kompose.network/services-default: "true"
        io.kompose.service: api-invocation-logs
      {{- include "capif.selectorLabels" . | nindent 8 }}
      annotations:
        kompose.cmd: kompose -f ../services/docker-compose.yml convert
        kompose.version: 1.28.0 (c4137012e)
    spec:
      imagePullSecrets:
        - name: regcred
      {{- if eq .Values.env "kubernetes-athens" }}
      hostAliases:
        - ip: "{{ .Values.ingress_ip.athens }}"
          hostnames:
            - "{{ .Values.nginx.nginx.env.capifHostname }}"
      {{- end }}
      {{- if eq .Values.env "kubernetes-uma" }}
      hostAliases: 
        - ip: "{{ .Values.ingress_ip.uma }}"
          hostnames:
            - "{{ .Values.nginx.nginx.env.capifHostname }}"
      {{- end }}
      containers:
      - env:
        - name: CAPIF_HOSTNAME
          value: {{ quote .Values.nginx.nginx.env.capifHostname }}
        - name: KUBERNETES_CLUSTER_DOMAIN
          value: {{ quote .Values.kubernetesClusterDomain }}
        image: {{ .Values.apiInvocationLogs.apiInvocationLogs.image.repository }}-{{ .Values.apiInvocationLogs.apiInvocationLogs.image.tag
          | default .Chart.AppVersion }}
        imagePullPolicy: Always
        name: api-invocation-logs
        ports:
        - containerPort: 8080
        resources:
            {{- toYaml .Values.apiInvocationLogs.apiInvocationLogs.resources | nindent 12 }}
        readinessProbe:
          tcpSocket:
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 5
      restartPolicy: Always
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-invoker-management
  labels:
    io.kompose.service: api-invoker-management
  {{- include "capif.labels" . | nindent 4 }}
  annotations:
    kompose.cmd: kompose -f ../services/docker-compose.yml convert
    kompose.version: 1.28.0 (c4137012e)
spec:
  replicas: {{ .Values.apiInvokerManagement.replicas }}
  selector:
    matchLabels:
      io.kompose.service: api-invoker-management
    {{- include "capif.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        io.kompose.network/services-default: "true"
        io.kompose.service: api-invoker-management
      {{- include "capif.selectorLabels" . | nindent 8 }}
      annotations:
        kompose.cmd: kompose -f ../services/docker-compose.yml convert
        kompose.version: 1.28.0 (c4137012e)
    spec:
      imagePullSecrets:
        - name: regcred
      {{- if eq .Values.env "kubernetes-athens" }}
      hostAliases:
        - ip: "{{ .Values.ingress_ip.athens }}"
          hostnames:
            - "{{ .Values.nginx.nginx.env.capifHostname }}"
      {{- end }}
      {{- if eq .Values.env "kubernetes-uma" }}
      hostAliases:
        - ip: "{{ .Values.ingress_ip.uma }}"
          hostnames:
            - "{{ .Values.nginx.nginx.env.capifHostname }}"
      {{- end }}
      containers:
      - env:
        - name: KUBERNETES_CLUSTER_DOMAIN
          value: {{ quote .Values.kubernetesClusterDomain }}
        image: {{ .Values.apiInvokerManagement.apiInvokerManagement.image.repository }}-{{
          .Values.apiInvokerManagement.apiInvokerManagement.image.tag | default .Chart.AppVersion
          }}
        imagePullPolicy: Always
        name: api-invoker-management
        ports:
        - containerPort: 8080
        resources:
            {{- toYaml .Values.apiInvokerManagement.apiInvokerManagement.resources | nindent 12 }}
        livenessProbe:
          exec:
            command:
            - sh
            - -c 
            - |-
              OUTPUT=$(redis-cli -h redis -p 6379 -n 1 GET  server_pub_key)
              echo "$OUTPUT"
              if [ -z "$OUTPUT" ]; then
                echo "cannot get the server public key from redis"
                exit 1;
              fi
          initialDelaySeconds: 3
          periodSeconds: 5
#        readinessProbe:
#          exec:
#            command:
#            - sh
#            - -c 
#            - |-
#              OUTPUT=$(redis-cli -h redis -p 6379 -n 1 GET  server_pub_key)
#              echo "$OUTPUT"
#              if [ -z "$OUTPUT" ]; then
#                echo "OUTPUT empty"
#                exit 1;
#              else
#                echo "OUTPUT: $OUTPUT"
#                redis-cli -h redis -p 6379 -n 1 GET  server_pub_key > /usr/src/app/api_invoker_management/pubkey.pem
#              fi
#          initialDelaySeconds: 20
#          periodSeconds: 5
#          successThreshold: 1
      restartPolicy: Always
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-provider-management
  labels:
    io.kompose.service: api-provider-management
  {{- include "capif.labels" . | nindent 4 }}
  annotations:
    kompose.cmd: kompose -f ../services/docker-compose.yml convert
    kompose.version: 1.28.0 (c4137012e)
spec:
  replicas: {{ .Values.apiProviderManagement.replicas }}
  selector:
    matchLabels:
      io.kompose.service: api-provider-management
    {{- include "capif.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        io.kompose.network/services-default: "true"
        io.kompose.service: api-provider-management
      {{- include "capif.selectorLabels" . | nindent 8 }}
      annotations:
        kompose.cmd: kompose -f ../services/docker-compose.yml convert
        kompose.version: 1.28.0 (c4137012e)
    spec:
      imagePullSecrets:
        - name: regcred
      {{- if eq .Values.env "kubernetes-athens" }}
      hostAliases:
        - ip: "{{ .Values.ingress_ip.athens }}"
          hostnames:
            - "{{ .Values.nginx.nginx.env.capifHostname }}"
      {{- end }}
      {{- if eq .Values.env "kubernetes-uma" }}
      hostAliases:
        - ip: "{{ .Values.ingress_ip.uma }}"
          hostnames:
            - "{{ .Values.nginx.nginx.env.capifHostname }}"
      {{- end }}
      containers:
      - env:
        - name: KUBERNETES_CLUSTER_DOMAIN
          value: {{ quote .Values.kubernetesClusterDomain }}
        image: {{ .Values.apiProviderManagement.apiProviderManagement.image.repository
          }}-{{ .Values.apiProviderManagement.apiProviderManagement.image.tag | default
          .Chart.AppVersion }}
        imagePullPolicy: Always
        name: api-provider-management
        ports:
        - containerPort: 8080
        livenessProbe:
          exec:
            command:
            - sh
            - -c 
            - |-
              OUTPUT=$(redis-cli -h redis -p 6379 -n 1 GET  server_priv_key)
              echo "$OUTPUT"
              if [ -z "$OUTPUT" ]; then
                echo "cannot get the server public key from redis"
                exit 1;
              fi
          initialDelaySeconds: 3
          periodSeconds: 5
#        readinessProbe:
#          exec:
#            command:
#            - sh
#            - -c 
#            - |-
#              OUTPUT=$(redis-cli -h redis -p 6379 -n 1 GET  server_pub_key)
#              echo "$OUTPUT"
#              if [ -z "$OUTPUT" ]; then
#                echo "OUTPUT empty"
#                exit 1;
#              else
#                echo "OUTPUT: $OUTPUT"
#                redis-cli -h redis -p 6379 -n 1 GET  server_pub_key > /usr/src/app/api_provider_management/pubkey.pem
#              fi
#          initialDelaySeconds: 20
#          periodSeconds: 5
#          successThreshold: 1
        resources:
            {{- toYaml .Values.apiProviderManagement.apiProviderManagement.resources | nindent 12 }}
      restartPolicy: Always
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: capif-events
  labels:
    io.kompose.service: capif-events
  {{- include "capif.labels" . | nindent 4 }}
  annotations:
    kompose.cmd: kompose -f ../services/docker-compose.yml convert
    kompose.version: 1.28.0 (c4137012e)
spec:
  replicas: {{ .Values.capifEvents.replicas }}
  selector:
    matchLabels:
      io.kompose.service: capif-events
    {{- include "capif.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        io.kompose.network/services-default: "true"
        io.kompose.service: capif-events
      {{- include "capif.selectorLabels" . | nindent 8 }}
      annotations:
        kompose.cmd: kompose -f ../services/docker-compose.yml convert
        kompose.version: 1.28.0 (c4137012e)
    spec:
      imagePullSecrets:
        - name: regcred
      {{- if eq .Values.env "kubernetes-athens" }}
      hostAliases:
        - ip: "{{ .Values.ingress_ip.athens }}"
          hostnames:
            - "{{ .Values.nginx.nginx.env.capifHostname }}"
      {{- end }}
      {{- if eq .Values.env "kubernetes-uma" }}
      hostAliases:
        - ip: "{{ .Values.ingress_ip.uma }}"
          hostnames:
            - "{{ .Values.nginx.nginx.env.capifHostname }}"
      {{- end }}
      containers:
      - env:
        - name: KUBERNETES_CLUSTER_DOMAIN
          value: {{ quote .Values.kubernetesClusterDomain }}
        image: {{ .Values.capifEvents.capifEvents.image.repository }}-{{ .Values.capifEvents.capifEvents.image.tag
          | default .Chart.AppVersion }}
        imagePullPolicy: Always
        name: capif-events
        ports:
        - containerPort: 8080
        resources:
            {{- toYaml .Values.capifEvents.capifEvents.resources | nindent 12 }}
        readinessProbe:
          tcpSocket:
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
      restartPolicy: Always
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: capif-routing-info
  labels:
    io.kompose.service: capif-routing-info
  {{- include "capif.labels" . | nindent 4 }}
  annotations:
    kompose.cmd: kompose -f ../services/docker-compose.yml convert
    kompose.version: 1.28.0 (c4137012e)
spec:
  replicas: {{ .Values.capifRoutingInfo.replicas }}
  selector:
    matchLabels:
      io.kompose.service: capif-routing-info
    {{- include "capif.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        io.kompose.network/services-default: "true"
        io.kompose.service: capif-routing-info
      {{- include "capif.selectorLabels" . | nindent 8 }}
      annotations:
        kompose.cmd: kompose -f ../services/docker-compose.yml convert
        kompose.version: 1.28.0 (c4137012e)
    spec:
      imagePullSecrets:
        - name: regcred
      {{- if eq .Values.env "kubernetes-athens" }}
      hostAliases:
        - ip: "{{ .Values.ingress_ip.athens }}"
          hostnames:
            - "{{ .Values.nginx.nginx.env.capifHostname }}"
      {{- end }}
      {{- if eq .Values.env "kubernetes-uma" }}
      hostAliases:  
        - ip: "{{ .Values.ingress_ip.uma }}"
          hostnames:
            - "{{ .Values.nginx.nginx.env.capifHostname }}"
      {{- end }}
      containers:
      - env:
        - name: KUBERNETES_CLUSTER_DOMAIN
          value: {{ quote .Values.kubernetesClusterDomain }}
        image: {{ .Values.capifRoutingInfo.capifRoutingInfo.image.repository }}-{{ .Values.capifRoutingInfo.capifRoutingInfo.image.tag
          | default .Chart.AppVersion }}
        imagePullPolicy: Always
        name: capif-routing-info
        ports:
        - containerPort: 8080
        resources:
            {{- toYaml .Values.capifRoutingInfo.capifRoutingInfo.resources | nindent 12 }}
        readinessProbe:
          tcpSocket:
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
      restartPolicy: Always
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: capif-security
  labels:
    io.kompose.service: capif-security
  {{- include "capif.labels" . | nindent 4 }}
  annotations:
    kompose.cmd: kompose -f ../services/docker-compose.yml convert
    kompose.version: 1.28.0 (c4137012e)
spec:
  replicas: {{ .Values.capifSecurity.replicas }}
  selector:
    matchLabels:
      io.kompose.service: capif-security
    {{- include "capif.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        io.kompose.network/services-default: "true"
        io.kompose.service: capif-security
      {{- include "capif.selectorLabels" . | nindent 8 }}
      annotations:
        kompose.cmd: kompose -f ../services/docker-compose.yml convert
        kompose.version: 1.28.0 (c4137012e)
    spec:
      imagePullSecrets:
        - name: regcred
      {{- if eq .Values.env "kubernetes-athens" }}
      hostAliases:
        - ip: "{{ .Values.ingress_ip.athens }}"
          hostnames:
            - "{{ .Values.nginx.nginx.env.capifHostname }}"
      {{- end }}
      {{- if eq .Values.env "kubernetes-uma" }}
      hostAliases:  
        - ip: "{{ .Values.ingress_ip.uma }}"
          hostnames:
            - "{{ .Values.nginx.nginx.env.capifHostname }}"
      {{- end }}
      containers:
      - env:
        - name: CAPIF_HOSTNAME
          value: {{ quote .Values.nginx.nginx.env.capifHostname }}
        - name: KUBERNETES_CLUSTER_DOMAIN
          value: {{ quote .Values.kubernetesClusterDomain }}
        image: {{ .Values.capifSecurity.capifSecurity.image.repository }}-{{ .Values.capifSecurity.capifSecurity.image.tag
          | default .Chart.AppVersion }}
        imagePullPolicy: Always
        name: capif-security
        ports:
        - containerPort: 8080
        resources:
            {{- toYaml .Values.capifSecurity.capifSecurity.resources | nindent 12 }}
        livenessProbe:
          exec:
            command:
            - sh
            - -c 
            - |-
              OUTPUT=$(redis-cli -h redis -p 6379 -n 1 GET  server_priv_key)
              echo "$OUTPUT"
              if [ -z "$OUTPUT" ]; then
                echo "cannot get the server private key from redis"
                exit 1;
              fi
          initialDelaySeconds: 3
          periodSeconds: 5
#        readinessProbe:
#          exec:
#            command:
#            - sh
#            - -c 
#            - |-
#              OUTPUT=$(redis-cli -h redis -p 6379 -n 1 GET  server_priv_key)
#              echo "$OUTPUT"
#              if [ -z "$OUTPUT" ]; then
#                echo "OUTPUT empty"
#                exit 1;
#              else
#                echo "OUTPUT: $OUTPUT"
#                redis-cli -h redis -p 6379 -n 1 GET  server_priv_key > /usr/src/app/capif_security/server.key
#              fi
#          initialDelaySeconds: 20
#          periodSeconds: 5
#          successThreshold: 1
      restartPolicy: Always
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: easy-rsa
  labels:
    io.kompose.service: easy-rsa
  {{- include "capif.labels" . | nindent 4 }}
  annotations:
    kompose.cmd: kompose -f ../services/docker-compose.yml convert
    kompose.version: 1.28.0 (c4137012e)
spec:
  replicas: {{ .Values.easyRsa.replicas }}
  selector:
    matchLabels:
      io.kompose.service: easy-rsa
    {{- include "capif.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        io.kompose.network/services-default: "true"
        io.kompose.service: easy-rsa
      {{- include "capif.selectorLabels" . | nindent 8 }}
      annotations:
        kompose.cmd: kompose -f ../services/docker-compose.yml convert
        kompose.version: 1.28.0 (c4137012e)
    spec:
      imagePullSecrets:
        - name: regcred
      {{- if eq .Values.env "kubernetes-athens" }}
      hostAliases:
        - ip: "{{ .Values.ingress_ip.athens }}"
          hostnames:
            - "{{ .Values.nginx.nginx.env.capifHostname }}"
      {{- end }}
      {{- if eq .Values.env "kubernetes-uma" }}
      hostAliases:  
        - ip: "{{ .Values.ingress_ip.uma }}"
          hostnames:
            - "{{ .Values.nginx.nginx.env.capifHostname }}"
      {{- end }}
      containers:
      - env:
        - name: KUBERNETES_CLUSTER_DOMAIN
          value: {{ quote .Values.kubernetesClusterDomain }}
        image: {{ .Values.easyRsa.easyRsa.image.repository }}-{{ .Values.easyRsa.easyRsa.image.tag
          | default .Chart.AppVersion }}
        imagePullPolicy: Always
        name: easy-rsa
        ports:
        - containerPort: 8080
        resources:
            {{- toYaml .Values.easyRsa.easyRsa.resources | nindent 12 }}
        readinessProbe:
          tcpSocket:
            port: 8080
#          initialDelaySeconds: 5
          periodSeconds: 5
      restartPolicy: Always
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jwtauth
  labels:
    io.kompose.service: jwtauth
  {{- include "capif.labels" . | nindent 4 }}
  annotations:
    kompose.cmd: kompose -f ../services/docker-compose.yml convert
    kompose.version: 1.28.0 (c4137012e)
spec:
  replicas: {{ .Values.jwtauth.replicas }}
  selector:
    matchLabels:
      io.kompose.service: jwtauth
    {{- include "capif.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        io.kompose.network/services-default: "true"
        io.kompose.service: jwtauth
      {{- include "capif.selectorLabels" . | nindent 8 }}
      annotations:
        kompose.cmd: kompose -f ../services/docker-compose.yml convert
        kompose.version: 1.28.0 (c4137012e)
    spec:
      imagePullSecrets:
        - name: regcred
      {{- if eq .Values.env "kubernetes-athens" }}
      hostAliases:
        - ip: "{{ .Values.ingress_ip.athens }}"
          hostnames:
            - "{{ .Values.nginx.nginx.env.capifHostname }}"
      {{- end }}
      {{- if eq .Values.env "kubernetes-uma" }}
      hostAliases:  
        - ip: "{{ .Values.ingress_ip.uma }}"
          hostnames:
            - "{{ .Values.nginx.nginx.env.capifHostname }}"
      {{- end }}
      containers:
      - env:
        - name: KUBERNETES_CLUSTER_DOMAIN
          value: {{ quote .Values.kubernetesClusterDomain }}
        image: {{ .Values.jwtauth.jwtauth.image.repository }}-{{ .Values.jwtauth.jwtauth.image.tag
          | default .Chart.AppVersion }}
        imagePullPolicy: Always
        name: jwtauth
        ports:
        - containerPort: 8080
        resources:
            {{- toYaml .Values.jwtauth.jwtauth.resources | nindent 12 }}
        livenessProbe:
          tcpSocket:
            port: 8080
#          exec:
#            command:
#            - sh
#            - -c 
#            - |-
#              OUTPUT=$(redis-cli -h redis -p 6379 -n 1 GET  server_priv_key)
#              echo "$OUTPUT"
#              if [ -z "$OUTPUT" ]; then
#                echo "cannot get the server private key from redis"
#                exit 1;
#              fi
          initialDelaySeconds: 3
          periodSeconds: 5
#        readinessProbe:
#          exec:
#            command:
#            - sh
#            - -c 
#            - |-
#              OUTPUT=$(redis-cli -h redis -p 6379 -n 1 GET  server_priv_key)
#              echo "$OUTPUT"
#              if [ -z "$OUTPUT" ]; then
#                echo "OUTPUT empty"
#                exit 1;
#              else
#                echo "OUTPUT: $OUTPUT"
#                redis-cli -h redis -p 6379 -n 1 GET  server_priv_key  > /usr/src/app/register_service/server.key
#              fi
#          initialDelaySeconds: 90
#          periodSeconds: 5
#          successThreshold: 1
      restartPolicy: Always
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: logs
  labels:
    io.kompose.service: logs
  {{- include "capif.labels" . | nindent 4 }}
  annotations:
    kompose.cmd: kompose -f ../services/docker-compose.yml convert
    kompose.version: 1.28.0 (c4137012e)
spec:
  replicas: {{ .Values.logs.replicas }}
  selector:
    matchLabels:
      io.kompose.service: logs
    {{- include "capif.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        io.kompose.network/services-default: "true"
        io.kompose.service: logs
      {{- include "capif.selectorLabels" . | nindent 8 }}
      annotations:
        kompose.cmd: kompose -f ../services/docker-compose.yml convert
        kompose.version: 1.28.0 (c4137012e)
    spec:
      imagePullSecrets:
        - name: regcred
      {{- if eq .Values.env "kubernetes-athens" }}
      hostAliases:
        - ip: "{{ .Values.ingress_ip.athens }}"
          hostnames:
            - "{{ .Values.nginx.nginx.env.capifHostname }}"
      {{- end }}
      {{- if eq .Values.env "kubernetes-uma" }}
      hostAliases:
        - ip: "{{ .Values.ingress_ip.uma }}"
          hostnames:
            - "{{ .Values.nginx.nginx.env.capifHostname }}"
      {{- end }}
      containers:
      - env:
        - name: KUBERNETES_CLUSTER_DOMAIN
          value: {{ quote .Values.kubernetesClusterDomain }}
        image: {{ .Values.logs.logs.image.repository }}-{{ .Values.logs.logs.image.tag
          | default .Chart.AppVersion }}
        imagePullPolicy: Always
        name: logs
        ports:
        - containerPort: 8080
        resources:
            {{- toYaml .Values.logs.logs.resources | nindent 12 }}
        readinessProbe:
          tcpSocket:
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
      restartPolicy: Always
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongo
  labels:
    io.kompose.service: mongo
  {{- include "capif.labels" . | nindent 4 }}
  annotations:
    kompose.cmd: kompose -f ../services/docker-compose.yml convert
    kompose.version: 1.28.0 (c4137012e)
spec:
  replicas: {{ .Values.mongo.replicas }}
  selector:
    matchLabels:
      io.kompose.service: mongo
    {{- include "capif.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        io.kompose.network/services-default: "true"
        io.kompose.service: mongo
      {{- include "capif.selectorLabels" . | nindent 8 }}
      annotations:
        kompose.cmd: kompose -f ../services/docker-compose.yml convert
        kompose.version: 1.28.0 (c4137012e)
    spec:
      imagePullSecrets:
        - name: regcred
      {{- if eq .Values.env "kubernetes-athens" }}
      hostAliases:
        - ip: "{{ .Values.ingress_ip.athens }}"
          hostnames:
            - "{{ .Values.nginx.nginx.env.capifHostname }}"
      {{- end }}
      {{- if eq .Values.env "kubernetes-uma" }}
      hostAliases:
        - ip: "{{ .Values.ingress_ip.uma }}"
          hostnames:
            - "{{ .Values.nginx.nginx.env.capifHostname }}"
      {{- end }}
      containers:
      - env:
        - name: MONGO_INITDB_ROOT_PASSWORD
          value: {{ quote .Values.mongo.mongo.env.mongoInitdbRootPassword }}
        - name: MONGO_INITDB_ROOT_USERNAME
          value: {{ quote .Values.mongo.mongo.env.mongoInitdbRootUsername }}
        - name: KUBERNETES_CLUSTER_DOMAIN
          value: {{ quote .Values.kubernetesClusterDomain }}
        image: {{ .Values.mongo.mongo.image.repository }}-{{ .Values.mongo.mongo.image.tag
          | default .Chart.AppVersion }}
        imagePullPolicy: Always
        name: mongo
        ports:
        - containerPort: 27017
        resources:
            {{- toYaml .Values.mongo.mongo.resources | nindent 12 }}
        readinessProbe:
          tcpSocket:
            port: 27017
#          initialDelaySeconds: 5
          periodSeconds: 5
      restartPolicy: Always
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongo-express
  labels:
    io.kompose.service: mongo-express
  {{- include "capif.labels" . | nindent 4 }}
  annotations:
    kompose.cmd: kompose -f ../services/docker-compose.yml convert
    kompose.version: 1.28.0 (c4137012e)
spec:
  replicas: {{ .Values.mongoExpress.replicas }}
  selector:
    matchLabels:
      io.kompose.service: mongo-express
    {{- include "capif.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        io.kompose.network/services-default: "true"
        io.kompose.service: mongo-express
      {{- include "capif.selectorLabels" . | nindent 8 }}
      annotations:
        kompose.cmd: kompose -f ../services/docker-compose.yml convert
        kompose.version: 1.28.0 (c4137012e)
    spec:
      imagePullSecrets:
        - name: regcred
      {{- if eq .Values.env "kubernetes-athens" }}
      hostAliases:
        - ip: "{{ .Values.ingress_ip.athens }}"
          hostnames:
            - "{{ .Values.nginx.nginx.env.capifHostname }}"
      {{- end }}
      {{- if eq .Values.env "kubernetes-uma" }}
      hostAliases:
        - ip: "{{ .Values.ingress_ip.uma }}"
          hostnames:
            - "{{ .Values.nginx.nginx.env.capifHostname }}"
      {{- end }}
      containers:
      - env:
        - name: ME_CONFIG_MONGODB_ADMINPASSWORD
          value: {{ quote .Values.mongoExpress.mongoExpress.env.meConfigMongodbAdminpassword
            }}
        - name: ME_CONFIG_MONGODB_ADMINUSERNAME
          value: {{ quote .Values.mongoExpress.mongoExpress.env.meConfigMongodbAdminusername
            }}
        - name: ME_CONFIG_MONGODB_URL
          value: {{ quote .Values.mongoExpress.mongoExpress.env.meConfigMongodbUrl }}
        - name: KUBERNETES_CLUSTER_DOMAIN
          value: {{ quote .Values.kubernetesClusterDomain }}
        image: {{ .Values.mongoExpress.mongoExpress.image.repository }}-{{ .Values.mongoExpress.mongoExpress.image.tag
          | default .Chart.AppVersion }}
        imagePullPolicy: Always
        name: mongo-express
        ports:
        - containerPort: 8081
        resources:
            {{- toYaml .Values.mongoExpress.mongoExpress.resources | nindent 12 }}
        readinessProbe:
          tcpSocket:
            port: 8081
#          initialDelaySeconds: 0
          periodSeconds: 5     
      restartPolicy: Always
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx
  labels:
    io.kompose.service: nginx
  {{- include "capif.labels" . | nindent 4 }}
  annotations:
    kompose.cmd: kompose -f ../services/docker-compose.yml convert
    kompose.version: 1.28.0 (c4137012e)
spec:
  replicas: {{ .Values.nginx.replicas }}
  selector:
    matchLabels:
      io.kompose.service: nginx
    {{- include "capif.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        io.kompose.network/services-default: "true"
        io.kompose.service: nginx
      {{- include "capif.selectorLabels" . | nindent 8 }}
      annotations:
        kompose.cmd: kompose -f ../services/docker-compose.yml convert
        kompose.version: 1.28.0 (c4137012e)
    spec:
      imagePullSecrets:
        - name: regcred
      {{- if eq .Values.env "kubernetes-athens" }}
      hostAliases:
        - ip: "{{ .Values.ingress_ip.athens }}"
          hostnames:
            - "{{ .Values.nginx.nginx.env.capifHostname }}"
      {{- end }}
      {{- if eq .Values.env "kubernetes-uma" }}
      hostAliases:
        - ip: "{{ .Values.ingress_ip.uma }}"
          hostnames:
            - "{{ .Values.nginx.nginx.env.capifHostname }}"
      {{- end }}
      containers:
      - env:
        - name: CAPIF_HOSTNAME
          value: {{ quote .Values.nginx.nginx.env.capifHostname }}
        - name: KUBERNETES_CLUSTER_DOMAIN
          value: {{ quote .Values.kubernetesClusterDomain }}
        image: {{ .Values.nginx.nginx.image.repository }}-{{ .Values.nginx.nginx.image.tag
          | default .Chart.AppVersion }}
        imagePullPolicy: Always
        name: nginx
        ports:
        - containerPort: 8080
        - containerPort: 443
        livenessProbe:
          tcpSocket:
            port: 8080
          initialDelaySeconds: 20
          periodSeconds: 5
#        readinessProbe:
#          tcpSocket:
#            port: 8080
#          initialDelaySeconds: 60
#          periodSeconds: 5
        resources:
            {{- toYaml .Values.nginx.nginx.resources | nindent 12 }}
      restartPolicy: Always
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: published-apis
  labels:
    io.kompose.service: published-apis
  {{- include "capif.labels" . | nindent 4 }}
  annotations:
    kompose.cmd: kompose -f ../services/docker-compose.yml convert
    kompose.version: 1.28.0 (c4137012e)
spec:
  replicas: {{ .Values.publishedApis.replicas }}
  selector:
    matchLabels:
      io.kompose.service: published-apis
    {{- include "capif.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        io.kompose.network/services-default: "true"
        io.kompose.service: published-apis
      {{- include "capif.selectorLabels" . | nindent 8 }}
      annotations:
        kompose.cmd: kompose -f ../services/docker-compose.yml convert
        kompose.version: 1.28.0 (c4137012e)
    spec:
      imagePullSecrets:
        - name: regcred
      {{- if eq .Values.env "kubernetes-athens" }}
      hostAliases:
        - ip: "{{ .Values.ingress_ip.athens }}"
          hostnames:
            - "{{ .Values.nginx.nginx.env.capifHostname }}"
      {{- end }}
      {{- if eq .Values.env "kubernetes-uma" }}
      hostAliases:
        - ip: "{{ .Values.ingress_ip.uma }}"
          hostnames:
            - "{{ .Values.nginx.nginx.env.capifHostname }}"
      {{- end }}
      containers:
      - env:
        - name: KUBERNETES_CLUSTER_DOMAIN
          value: {{ quote .Values.kubernetesClusterDomain }}
        image: {{ .Values.publishedApis.publishedApis.image.repository }}-{{ .Values.publishedApis.publishedApis.image.tag
          | default .Chart.AppVersion }}
        imagePullPolicy: Always
        name: published-apis
        ports:
        - containerPort: 8080
        resources:
            {{- toYaml .Values.publishedApis.publishedApis.resources | nindent 12 }}
        readinessProbe:
          tcpSocket:
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
      restartPolicy: Always
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  labels:
    io.kompose.service: redis
  {{- include "capif.labels" . | nindent 4 }}
  annotations:
    kompose.cmd: kompose -f ../services/docker-compose.yml convert
    kompose.version: 1.28.0 (c4137012e)
spec:
  replicas: {{ .Values.redis.replicas }}
  selector:
    matchLabels:
      io.kompose.service: redis
    {{- include "capif.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        io.kompose.network/services-default: "true"
        io.kompose.service: redis
      {{- include "capif.selectorLabels" . | nindent 8 }}
      annotations:
        kompose.cmd: kompose -f ../services/docker-compose.yml convert
        kompose.version: 1.28.0 (c4137012e)
    spec:
      imagePullSecrets:
        - name: regcred
      {{- if eq .Values.env "kubernetes-athens" }}
      hostAliases:
        - ip: "{{ .Values.ingress_ip.athens }}"
          hostnames:
            - "{{ .Values.nginx.nginx.env.capifHostname }}"
      {{- end }}
      {{- if eq .Values.env "kubernetes-uma" }}
      hostAliases:
        - ip: "{{ .Values.ingress_ip.uma }}"
          hostnames:
            - "{{ .Values.nginx.nginx.env.capifHostname }}"
      {{- end }}
      containers:
      - args:
        - redis-server
        env:
        - name: REDIS_REPLICATION_MODE
          value: {{ quote .Values.redis.redis.env.redisReplicationMode }}
        - name: KUBERNETES_CLUSTER_DOMAIN
          value: {{ quote .Values.kubernetesClusterDomain }}
        image: {{ .Values.redis.redis.image.repository }}-{{ .Values.redis.redis.image.tag
          | default .Chart.AppVersion }}
        imagePullPolicy: Always
        name: redis
        ports:
        - containerPort: 6379
        resources:
            {{- toYaml .Values.redis.redis.resources | nindent 12 }}
        readinessProbe:
          tcpSocket:
            port: 6379
#          initialDelaySeconds: 5
          periodSeconds: 5
        livenessProbe:
          tcpSocket:
            port: 6379
          initialDelaySeconds: 5
          periodSeconds: 5
      restartPolicy: Always
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: service-apis
  labels:
    io.kompose.service: service-apis
  {{- include "capif.labels" . | nindent 4 }}
  annotations:
    kompose.cmd: kompose -f ../services/docker-compose.yml convert
    kompose.version: 1.28.0 (c4137012e)
spec:
  replicas: {{ .Values.serviceApis.replicas }}
  selector:
    matchLabels:
      io.kompose.service: service-apis
    {{- include "capif.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        io.kompose.network/services-default: "true"
        io.kompose.service: service-apis
      {{- include "capif.selectorLabels" . | nindent 8 }}
      annotations:
        kompose.cmd: kompose -f ../services/docker-compose.yml convert
        kompose.version: 1.28.0 (c4137012e)
    spec:
      imagePullSecrets:
        - name: regcred
      {{- if eq .Values.env "kubernetes-athens" }}
      hostAliases:
        - ip: "{{ .Values.ingress_ip.athens }}"
          hostnames:
            - "{{ .Values.nginx.nginx.env.capifHostname }}"
      {{- end }}
      {{- if eq .Values.env "kubernetes-uma" }}
      hostAliases:
        - ip: "{{ .Values.ingress_ip.uma }}"
          hostnames:
            - "{{ .Values.nginx.nginx.env.capifHostname }}"
      {{- end }}
      containers:
      - env:
        - name: KUBERNETES_CLUSTER_DOMAIN
          value: {{ quote .Values.kubernetesClusterDomain }}
        image: {{ .Values.serviceApis.serviceApis.image.repository }}-{{ .Values.serviceApis.serviceApis.image.tag
          | default .Chart.AppVersion }}
        imagePullPolicy: Always
        name: service-apis
        ports:
        - containerPort: 8080
        resources:
            {{- toYaml .Values.serviceApis.serviceApis.resources | nindent 12 }}
        readinessProbe:
          tcpSocket:
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
      restartPolicy: Always