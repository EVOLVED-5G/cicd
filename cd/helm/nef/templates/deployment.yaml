apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "nef.fullname" . }}-db
  labels:
  {{- include "nef.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.db.replicas }}
  selector:
    matchLabels:
      app: db
    {{- include "nef.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        app: db
      {{- include "nef.selectorLabels" . | nindent 8 }}
    spec:
      containers:
      - args:
        - -c
        - shared_buffers=256MB
        - -c
        - max_connections=200
        env:
        - name: PGDATA
          value: {{ quote .Values.db.db.env.pgdata }}
        - name: POSTGRES_SERVER
          valueFrom:
            configMapKeyRef:
              key: POSTGRES_SERVER
              name: {{ include "nef.fullname" . }}-configmap
        - name: POSTGRES_USER
          valueFrom:
            configMapKeyRef:
              key: POSTGRES_USER
              name: {{ include "nef.fullname" . }}-configmap
        - name: POSTGRES_PASSWORD
          valueFrom:
            configMapKeyRef:
              key: POSTGRES_PASSWORD
              name: {{ include "nef.fullname" . }}-configmap
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              key: POSTGRES_DB
              name: {{ include "nef.fullname" . }}-configmap
        - name: KUBERNETES_CLUSTER_DOMAIN
          value: {{ quote .Values.kubernetesClusterDomain }}
        image: {{ .Values.db.db.image.repository }}-{{ .Values.db.db.image.tag | default .Chart.AppVersion }}
        name: db
        resources: {}
        volumeMounts:
        - mountPath: /var/lib/postgresql/data/pgdata
          name: app-db-data
      imagePullSecrets:
        - name: regcred
      {{- if eq .Values.environment "kubernetes-athens" }}     
      hostAliases: 
        - ip: "{{ .Values.ingress_ip.athens }}"
          hostnames:
            - "{{ .Values.backend.ingress.host }}"
            - "{{ .Values.env.capifHostname }}"
      {{- end }}
      {{- if eq .Values.environment "kubernetes-uma" }}
      hostAliases:
        - ip: "{{ .Values.ingress_ip.uma }}"
          hostnames:
            - "{{ .Values.backend.ingress.host }}"
            - "{{ .Values.env.capifHostname }}"
      {{- end }}
      volumes:
      - emptyDir: {}
        name: app-db-data
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "nef.fullname" . }}-mongo
  labels:
  {{- include "nef.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.mongo.replicas }}
  selector:
    matchLabels:
      app: nef-mongo
    {{- include "nef.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        app: nef-mongo
      {{- include "nef.selectorLabels" . | nindent 8 }}
    spec:
      containers:
      - env:
        - name: MONGO_INITDB_ROOT_USERNAME
          valueFrom:
            configMapKeyRef:
              key: MONGO_USER
              name: {{ include "nef.fullname" . }}-configmap
        - name: MONGO_INITDB_ROOT_PASSWORD
          valueFrom:
            configMapKeyRef:
              key: MONGO_PASSWORD
              name: {{ include "nef.fullname" . }}-configmap
        - name: KUBERNETES_CLUSTER_DOMAIN
          value: {{ quote .Values.kubernetesClusterDomain }}
        image: {{ .Values.mongo.nefMongo.image.repository }}-{{ .Values.mongo.nefMongo.image.tag | default .Chart.AppVersion }}
        name: nef-mongo
        ports:
        - containerPort: 27017
        resources: {}
        volumeMounts:
        - mountPath: /data/db
          name: app-mongo-db-data
      imagePullSecrets:
        - name: regcred
      {{- if eq .Values.environment "kubernetes-athens" }}     
      hostAliases: 
        - ip: "{{ .Values.ingress_ip.athens }}"
          hostnames:
            - "{{ .Values.backend.ingress.host }}"
            - "{{ .Values.env.capifHostname }}"
      {{- end }}
      {{- if eq .Values.environment "kubernetes-uma" }}
      hostAliases:
        - ip: "{{ .Values.ingress_ip.uma }}"
          hostnames:
            - "{{ .Values.backend.ingress.host }}"
            - "{{ .Values.env.capifHostname }}"
      {{- end }}
      volumes:
      - emptyDir: {}
        name: app-mongo-db-data
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "nef.fullname" . }}-mongo-express
  labels:
  {{- include "nef.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.mongoExpress.replicas }}
  selector:
    matchLabels:
      app: mongo-express
    {{- include "nef.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        app: mongo-express
      {{- include "nef.selectorLabels" . | nindent 8 }}
    spec:
      containers:
      - env:
        - name: ME_CONFIG_MONGODB_ADMINUSERNAME
          valueFrom:
            configMapKeyRef:
              key: MONGO_USER
              name: {{ include "nef.fullname" . }}-configmap
        - name: ME_CONFIG_MONGODB_ADMINPASSWORD
          valueFrom:
            configMapKeyRef:
              key: MONGO_PASSWORD
              name: {{ include "nef.fullname" . }}-configmap
        - name: ME_CONFIG_MONGODB_URL
          valueFrom:
            configMapKeyRef:
              key: ME_CONFIG_MONGODB_URL
              name: {{ include "nef.fullname" . }}-configmap
        - name: KUBERNETES_CLUSTER_DOMAIN
          value: {{ quote .Values.kubernetesClusterDomain }}
        image: {{ .Values.mongoExpress.mongoExpress.image.repository }}-{{ .Values.mongoExpress.mongoExpress.image.tag | default .Chart.AppVersion }}
        name: mongo-express
        ports:
        - containerPort: 8081
        resources: {}
      imagePullSecrets:
        - name: regcred
      {{- if eq .Values.environment "kubernetes-athens" }}     
      hostAliases: 
        - ip: "{{ .Values.ingress_ip.athens }}"
          hostnames:
            - "{{ .Values.backend.ingress.host }}"
            - "{{ .Values.env.capifHostname }}"
      {{- end }}
      {{- if eq .Values.environment "kubernetes-uma" }}
      hostAliases:
        - ip: "{{ .Values.ingress_ip.uma }}"
          hostnames:
            - "{{ .Values.backend.ingress.host }}"
            - "{{ .Values.env.capifHostname }}"
      {{- end }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "nef.fullname" . }}-backend
  labels:
  {{- include "nef.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.backend.replicas }}
  selector:
    matchLabels:
      app: backend
    {{- include "nef.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        app: backend
      {{- include "nef.selectorLabels" . | nindent 8 }}
    spec:
      containers:
      - command:
        - /start-reload.sh
        env:
        - name: PRODUCTION
          valueFrom:
            configMapKeyRef:
              key: PRODUCTION
              name: {{ include "nef.fullname" . }}-configmap
        - name: DOMAIN_NAME
          valueFrom:
            configMapKeyRef:
              key: DOMAIN_NAME
              name: {{ include "nef.fullname" . }}-configmap
        - name: NGINX_HOST
          valueFrom:
            configMapKeyRef:
              key: NGINX_HOST
              name: {{ include "nef.fullname" . }}-configmap
        - name: NGINX_HTTPS
          valueFrom:
            configMapKeyRef:
              key: NGINX_HTTPS
              name: {{ include "nef.fullname" . }}-configmap
        - name: SERVER_NAME
          valueFrom:
            configMapKeyRef:
              key: SERVER_NAME
              name: {{ include "nef.fullname" . }}-configmap
        - name: SERVER_HOST
          valueFrom:
            configMapKeyRef:
              key: SERVER_HOST
              name: {{ include "nef.fullname" . }}-configmap
        - name: SERVER_PORT
          valueFrom:
            configMapKeyRef:
              key: SERVER_PORT
              name: {{ include "nef.fullname" . }}-configmap
        - name: SENTRY_DSN
          valueFrom:
            configMapKeyRef:
              key: SENTRY_DSN
              name: {{ include "nef.fullname" . }}-configmap
        - name: BACKEND_CORS_ORIGINS
          valueFrom:
            configMapKeyRef:
              key: BACKEND_CORS_ORIGINS
              name: {{ include "nef.fullname" . }}-configmap
        - name: SECRET_KEY
          valueFrom:
            configMapKeyRef:
              key: SECRET_KEY
              name: {{ include "nef.fullname" . }}-configmap
        - name: FIRST_SUPERUSER
          valueFrom:
            configMapKeyRef:
              key: FIRST_SUPERUSER
              name: {{ include "nef.fullname" . }}-configmap
        - name: FIRST_SUPERUSER_PASSWORD
          valueFrom:
            configMapKeyRef:
              key: FIRST_SUPERUSER_PASSWORD
              name: {{ include "nef.fullname" . }}-configmap
        - name: PROJECT_NAME
          valueFrom:
            configMapKeyRef:
              key: PROJECT_NAME
              name: {{ include "nef.fullname" . }}-configmap
        - name: NEF_HOST
          valueFrom:
            configMapKeyRef:
              key: NEF_HOST
              name: {{ include "nef.fullname" . }}-configmap
        - name: POSTGRES_SERVER
          valueFrom:
            configMapKeyRef:
              key: POSTGRES_SERVER
              name: {{ include "nef.fullname" . }}-configmap
        - name: POSTGRES_USER
          valueFrom:
            configMapKeyRef:
              key: POSTGRES_USER
              name: {{ include "nef.fullname" . }}-configmap
        - name: POSTGRES_PASSWORD
          valueFrom:
            configMapKeyRef:
              key: POSTGRES_PASSWORD
              name: {{ include "nef.fullname" . }}-configmap
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              key: POSTGRES_DB
              name: {{ include "nef.fullname" . }}-configmap
        - name: MONGO_CLIENT
          valueFrom:
            configMapKeyRef:
              key: MONGO_CLIENT
              name: {{ include "nef.fullname" . }}-configmap
        - name: CAPIF_HOST
          valueFrom:
            configMapKeyRef:
              key: CAPIF_HOST
              name: {{ include "nef.fullname" . }}-configmap
        - name: CAPIF_HTTP_PORT
          valueFrom:
            configMapKeyRef:
              key: CAPIF_HTTP_PORT
              name: {{ include "nef.fullname" . }}-configmap
        - name: CAPIF_HTTPS_PORT
          valueFrom:
            configMapKeyRef:
              key: CAPIF_HTTPS_PORT
              name: {{ include "nef.fullname" . }}-configmap
        - name: EXTERNAL_NET
          valueFrom:
            configMapKeyRef:
              key: EXTERNAL_NET
              name: {{ include "nef.fullname" . }}-configmap
        - name: USE_PUBLIC_KEY_VERIFICATION
          valueFrom:
            configMapKeyRef:
              key: USE_PUBLIC_KEY_VERIFICATION
              name: {{ include "nef.fullname" . }}-configmap
        - name: USERS_OPEN_REGISTRATION
          valueFrom:
            configMapKeyRef:
              key: USERS_OPEN_REGISTRATION
              name: {{ include "nef.fullname" . }}-configmap
        - name: KUBERNETES_CLUSTER_DOMAIN
          value: {{ quote .Values.kubernetesClusterDomain }}
        image: {{ .Values.backend.backend.image.repository }}-{{ .Values.backend.backend.image.tag | default .Chart.AppVersion }}
        imagePullPolicy: {{ .Values.backend.backend.imagePullPolicy }}
        name: backend
        ports:
        - containerPort: 80
        resources: {}
      imagePullSecrets:
        - name: regcred
      {{- if eq .Values.environment "kubernetes-athens" }}     
      hostAliases: 
        - ip: "{{ .Values.ingress_ip.athens }}"
          hostnames:
            - "{{ .Values.backend.ingress.host }}"
            - "{{ .Values.env.capifHostname }}"
      {{- end }}
      {{- if eq .Values.environment "kubernetes-uma" }}
      hostAliases:
        - ip: "{{ .Values.ingress_ip.uma }}"
          hostnames:
            - "{{ .Values.backend.ingress.host }}"
            - "{{ .Values.env.capifHostname }}"
      {{- end }}